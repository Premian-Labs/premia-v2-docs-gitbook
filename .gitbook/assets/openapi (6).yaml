openapi: 3.0.3
info:
  title: Orderbook Quotes API (OpenAPI 3.0)
  description: |-
  license:
    name: Attribution-NonCommercial 3.0
    url: https://creativecommons.org/licenses/by-nc/3.0
  version: 1.0.0
externalDocs:
  description: Premia Gitbook
  url: https://docs.premia.finance
servers:
  - url: https://test.orderbook.premia.finance
tags:
  - name: http
    description: HTTPs API
  - name: websockets
    description: TBD
paths:
  /rfq_quotes:
    get:
      tags:
        - http
      summary: Get private quotes assigned to user (taker) address
      parameters:
        - name: poolAddress
          in: query
          description: unique address of the pool
          required: true
          schema:
            type: string
            pattern: "^0x[a-fA-F0-9]{40}$"
        - name: side
          in: query
          description: orderbook side ("ask" or "bid")
          required: true
          schema:
            type: string
            pattern: "^bid$|^ask$"
        - name: chainId
          in: query
          description: chain id ("42161" or "421613")
          required: true
          schema:
            type: string
            pattern: "^42161$|^421613$"
        - name: taker
          in: query
          description: taker address
          required: true
          schema:
            type: string
            pattern: "^0x[a-fA-F0-9]{40}$"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PostQuotesRequest'
        '400':
          description: Invalid parameters supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Invalid parameters supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthError'
      security:
        - api_key:
            - api
  /quotes:
    post:
      tags:
        - http
      summary: Publishes the quote into the orderbook
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/PostQuotesRequest'
        required: true
      responses:
        '200':
          description: Quote exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    default: 'Quote exists'
        '201':
          description: Quote created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RedisPostQuoteRequest'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - $ref: '#/components/schemas/TTLError'
        '401':
          description: Invalid parameters supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthError'
      security:
        - api_key:
            - api
    delete:
      tags:
        - http
      summary: Publishes the quote from the orderbook
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/DeleteQuotesRequest'
        required: true
      responses:
        '200':
          description: Successful operation
        '204':
          description: Quote not found
        '400':
          description: Invalid parameters supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Invalid parameters supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthError'
      security:
        - api_key:
            - api
    get:
      tags:
        - http
      summary: Get best quotes to fill the order parametrised by query params
      parameters:
        - name: poolAddress
          in: query
          description: unique address of the pool
          required: true
          schema:
            type: string
            pattern: "^0x[a-fA-F0-9]{40}$"
        - name: size
          in: query
          description: fill size (1 contract = 1e18)
          required: true
          schema:
            type: string
            pattern: "^[0-9]*$"
        - name: side
          in: query
          description: orderbook side ("ask" or "bid")
          required: true
          schema:
            type: string
            pattern: "^bid$|^ask$"
        - name: chainId
          in: query
          description: chain id ("42161" or "421613")
          required: true
          schema:
            type: string
            pattern: "^42161$|^421613$"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PostQuotesRequest'
        '400':
          description: Invalid parameters supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Invalid parameters supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthError'
      security:
        - api_key:
            - api
  /orders:
    get:
      tags:
        - http
      summary: Get all quotes available using query params
      parameters:
        - name: poolAddress
          in: query
          description: unique address of the pool
          required: false
          schema:
            type: string
            pattern: "^0x[a-fA-F0-9]{40}$"
        - name: size
          in: query
          description: fill size (1 contract = 1e18)
          required: false
          schema:
            type: string
            pattern: "^[0-9]*$"
        - name: side
          in: query
          description: orderbook side ("ask" or "bid")
          required: false
          schema:
            type: string
            pattern: "^bid$|^ask$"
        - name: chainId
          in: query
          description: chain id ("42161" or "421613")
          required: true
          schema:
            type: string
            pattern: "^42161$|^421613$"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PostQuotesRequest'
        '400':
          description: Invalid parameters supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Invalid parameters supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthError'
      security:
        - api_key:
            - api
components:
  schemas:
    RedisPostQuoteRequest:
      allOf:
        - $ref: '#/components/schemas/PostQuotesRequest'
        - properties:
            quoteId:
              type: string
              pattern: "[a-fA-F0-9]{64}"
          required:
            - quoteId
    PostQuotesRequest:
      type: object
      properties:
        poolKey:
          type: object
          properties:
            base:
              type: string
              pattern: '^0x[a-fA-F0-9]{40}$'
            quote:
              type: string
              pattern: '^0x[a-fA-F0-9]{40}$'
            oracleAdapter:
              type: string
              pattern: '^0x[a-fA-F0-9]{40}$'
            strike:
              type: string
            maturity:
              type: integer
            isCallPool:
              type: boolean
          required:
            - base
            - quote
            - oracleAdapter
            - strike
            - maturity
            - isCallPool
          additionalProperties: false
        chainId:
          type: string
          pattern: '^42161$|^421613$'
        provider:
          type: string
          pattern: '^0x[a-fA-F0-9]{40}$'
        taker:
          type: string
          pattern: '^0x[a-fA-F0-9]{40}$'
        price:
          type: string
        size:
          type: string
        isBuy:
          type: boolean
        deadline:
          type: integer
        salt:
          type: integer
        signature:
          type: object
          properties:
            r:
              type: string
            s:
              type: string
            v:
              type: integer
          required:
            - r
            - s
            - v
          additionalProperties: false
      required:
        - poolKey
        - chainId
        - provider
        - taker
        - price
        - size
        - isBuy
        - deadline
        - salt
        - signature
    DeleteQuotesRequest:
      type: object
      properties:
        quoteId:
          type: string
          pattern: "[a-fA-F0-9]{64}"
      required:
        - quoteId
    TTLError:
      type: object
      properties:
        message:
          type: string
          default: 'Quote deadline is invalid (cannot be less than 60 sec)'
        quote:
          $ref: '#/components/schemas/PostQuotesRequest'
    AnyValue: {}
    AuthError:
      type: object
      properties:
        message:
          type: string
          default: 'Invalid API key'
    ValidationError:
      type: array
      items:
        type: object
        properties:
          keyword:
            type: string
          dataPath:
            type: string
          params:
            $ref: '#/components/schemas/AnyValue'
          message:
            type: string
  securitySchemes:
    api_key:
      type: apiKey
      name: x-apikey
      in: header